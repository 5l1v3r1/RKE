package de.rub.rkeinstantiation.factories;

import java.security.SecureRandom;

import org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves;
import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.crypto.digests.SHA256Digest;
import org.bouncycastle.crypto.generators.KDF2BytesGenerator;
import org.bouncycastle.crypto.params.ECDomainParameters;

import de.rub.rke.factories.KemFactory;
import de.rub.rke.kem.KeyEncapsulationMechanism;
import de.rub.rkeinstantiation.brkekem.ECIESKeyEncapsulationMechanism;

/**
 * Factory for the ECIES-Kem.
 * 
 * [1] Kryptographische Verfahren: Empfehlungen und Schluessellaengen
 * https://www.bsi.bund.de/SharedDocs/Downloads/DE/BSI/Publikationen/TechnischeRichtlinien/TR02102/BSI-TR-02102.pdf?__blob=publicationFile
 * [2] Algorithms, Key Size and Protocols Report (2018)
 * http://www.ecrypt.eu.org/csa/documents/D5.4-FinalAlgKeySizeProt.pdf 
 * [3] ISO/IEC 18033-2: Information techology - Security techniques 
 * Encryption algorithms - Part 2: Asymmetric Ciphers
 * https://www.shoup.net/iso/std4.pdf
 * 
 * @author Marco Smeets
 *
 */
public class ECIESKemFactory implements KemFactory {

	/**
	 * Specifies the key length generated by the Kem (in Bytes).
	 */
	private final int GENERATED_KEY_LENGTH = 16;

	/**
	 * Creates an Ecies Kem. Uses the elliptic curve 'brainpoolp256r1', which is
	 * recommended by [1] and complies to the recommendations in [2], since it uses
	 * a 256 Bit group.
	 * 
	 * As the kdf we use kdf2 described in [3], which is also recommended by [1].
	 * Internally the kdf uses SHA256.
	 * 
	 */
	@Override
	public KeyEncapsulationMechanism createKem() {
		X9ECParameters curveSpecs = TeleTrusTNamedCurves.getByName("brainpoolp256r1");
		ECDomainParameters ecParameter = new ECDomainParameters(curveSpecs.getCurve(), curveSpecs.getG(),
				curveSpecs.getN());
		SecureRandom randomness = new SecureRandom();
		KDF2BytesGenerator kdf = new KDF2BytesGenerator(new SHA256Digest());
		return new ECIESKeyEncapsulationMechanism(ecParameter, kdf, randomness, GENERATED_KEY_LENGTH);
	}

}
