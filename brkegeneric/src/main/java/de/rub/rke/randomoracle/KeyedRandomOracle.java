package de.rub.rke.randomoracle;

import java.security.SecureRandom;

import de.rub.rke.variables.SymmetricKey;
import de.rub.rke.variables.Transcript;

/**
 * Interface for a keyed random oracle used by the Brke construction.
 * 
 * The random oracle stores two symmetric keys. A symmetric key for the 'send'
 * random oracle, and one symmetric key for the 'receive' random oracle.
 * 
 * @author Marco Smeets
 *
 */
public interface KeyedRandomOracle {

	/**
	 * Initialized the random oracle
	 * 
	 * @param randomness - randomness used for key generation
	 * @param initiator  - true (if initiator of conversation; false otherwise)
	 */
	public void init(SecureRandom randomness, boolean initiator);

	/**
	 * Uses the send symmetric key to produce a random oracle output
	 * 
	 * @param kemOutputKey - symmetric key generated by the kem
	 * @param transcript   - transcript
	 * @return key seed and session key
	 */
	public KeyedRandomOracleOutput querySendRandomOracle(SymmetricKey kemOutputKey, Transcript transcript);

	/**
	 * Uses the receive symmetric key to produce a random oracle output
	 * 
	 * @param kemOutputKey - symmetric key generated by the kem
	 * @param transcript   - transcript
	 * @return key seed and session key
	 */
	public KeyedRandomOracleOutput queryReceiveRandomOracle(SymmetricKey kemOutputKey, Transcript transcript);
}
